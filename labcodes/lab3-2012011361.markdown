# Lab3实验报告
&#160; &#160; &#160; &#160;本次实验是在实验二的基础上，借助于页表机制和实验一中涉及的中断异常处理机制，完成PageFault异常处理和FIFO页替换算法的实现，结合磁盘提供的缓存空间，从而能够支持虚存管理，提供一个比实际物理内存空间“更大”的虚拟内存空间给系统使用。这个实验与实际操作系统中的实现比较起来要简单，不过需要了解实验一和实验二的具体实现。实际操作系统系统中的虚拟内存管理设计与实现是相当复杂的，涉及到与进程管理系统、文件系统等的交叉访问。如果大家有余力，可以尝试完成扩展练习，实现extended　clock页替换算法

标签（空格分隔）： ucore-lab

---

## 练习0：填写已有实验
本实验依赖实验1/2。请把你做的实验1/2的代码填入本实验中代码中有“LAB1”,“LAB2”的注释相应部分
> 答：已经完成了Lab1与Lab2代码的移植

---

## 练习1：给未被映射的地址映射上物理页（需要编程）

完成do_pgfault（mm/vmm.c）函数，给未被映射的地址映射上物理页。设置访问权限 的时候需要参考页面所在 VMA 的权限，同时需要注意映射物理页时需要操作内存控制 结构所指定的页表，而不是内核的页表。注意：在LAB2 EXERCISE 1处填写代码。执行
```
make　qemu
```
后，如果通过check_pgfault函数的测试后，会有“check_pgfault() succeeded!”的输出，表示练习1基本正确。

#### 请在实验报告中简要说明你的设计实现过程。请回答如下问题：

1. 请描述页目录项（Pag Director Entry）和页表（Page Table Entry）中组成部分对ucore实现页替换算法的潜在用处。
> 答：当出现页异常时，在函数do_pgfault中，需要根据页目录项寻找页表项，如果该页表项对应的物理帧不存在，则需要分配一个物理页面，并将该物理页面与页表项关联；页表项中除了指出物理帧的地址外，还有一些标志位，如最近是否被访问过或是否被修改过等，这样在实现页替换算法的时候可能需要用到。

2. 如果ucore的缺页服务例程在执行过程中访问内存，出现了页访问异常，请问硬件要做哪些事情？
> 答：如果出现了页访问异常，需要进行中断处理，硬件会保存出现页访问异常的现场，并产生缺页中断，然后取访问中断描述符表与全局描述符表得到页访问异常中断服务例程的地址，并开始执行处理缺页异常；异常处理完毕后，会恢复出现异常的现场，并从异常处重新开始执行。

---

## 练习2：补充完成基于FIFO的页面替换算法（需要编程）

完成vmm.c中的do_pgfault函数，并且在实现FIFO算法的swap_fifo.c中完成map_swappable和swap_out_vistim函数。通过对swap的测试。注意：在LAB2 EXERCISE 2处填写代码。执行
```
make　qemu
```
后，如果通过check_swap函数的测试后，会有“check_swap() succeeded!”的输出，表示练习2基本正确。

#### 请在实验报告中简要说明你的设计实现过程:
> 答：首先在完成练习1的基础上，如果该页表项对应的物理帧存在的话，说明该页面现在不在内存中，需要从磁盘上读入，并将物理地址与逻辑地址映射，并且该页也是可以替换的；实现FIFO算法中，根据原理课中可知，需要将最新访问的页面加入到链表的末尾，需要置换时置换链表头的元素，其中head的前一个是队尾，head的后一个是队首。

#### 请在实验报告中回答如下问题：
如果要在ucore上实现"extended clock页替换算法"请给你的设计方案，现有的swap_manager框架是否足以支持在ucore中实现此算法？如果是，请给你的设计方案；如果不是，请给出你的新的扩展和基此扩展的设计方案。
> 答：如果要实验"extended clock页替换算法，需要知道修改位于使用位的取值，现有的数据结构能够满足，但在查找可进行置换的页面时，需要遍历环形链表来查找使用位和修改位都为0的页面进行置换，在遍历的过程中同时修改标识如下：两位数分别为“使用位和修改位”
00 -> 置换
01 -> 00
10 -> 00 
11 -> 01

并需要回答如下问题：
> * 需要被换出的页的特征是什么？
> 答：需要被换出的页修改位和使用位都为0
> * 在ucore中如何判断具有这样特征的页？
> 答：判断PTE_A，PTE_D的取值
> * 何时进行换入和换出操作？
> 答：当物理页面不足时进行换入换出操作，何时进行替换与FIFO时相同的

---

####重要的知识点：
本章中重点是页面置换算法，包括局部页面置换算法和全局页面置换算法，在实验中我们尝试补全了比较简单的FIFO页面置换算法；在实验中遇到的问题是发现写完lab3后发现执行“make qemu”会有问题，后来检查了好久发现是之前的lab2中有一个地方写的有些问题；完成每次实验后还是要多检查一下，不要遗漏。
