# La1实验报告
&#160; &#160; &#160; &#160;操作系统是一个软件，也需要通过某种机制加载并运行它。在这里我们将通过另外一个更加简单的软件-bootloader来完成这些工作。为此，我们需要完成一个能够切换到x86的保护模式并显示字符的bootloader，为启动操作系统ucore做准备。lab1提供了一个非常小的bootloader和ucore OS，整个bootloader执行代码小于512个字节，这样才能放到硬盘的主引导扇区中。

标签（空格分隔）： ucore-lab1

---

## 练习1：理解通过make生成执行文件的过程
列出本实验各练习中对应的OS原理的知识点，并说明本实验中的实现部分如何对应和体现了原理中的基本概念和关键知识点。
在此练习中，大家需要通过静态分析代码来了解：
#### 1. 操作系统镜像文件ucore.img是如何一步一步生成的？
(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)
> (1). 根据lab1/Makefile文件中的以下代码可知，创建ucore.img需要先创建kernel和bootblock
``` makefile
# create ucore.img
UCOREIMG	:= $(call totarget,ucore.img)
$(UCOREIMG): $(kernel) $(bootblock)
	$(V)dd if=/dev/zero of=$@ count=10000
	$(V)dd if=$(bootblock) of=$@ conv=notrunc
	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
$(call create_target,ucore.img)
```
> (2).  Makefile文件中创建kernel的代码如下所示：
``` makefile
# create kernel target
kernel = $(call totarget,kernel)
$(kernel): tools/kernel.ld
$(kernel): $(KOBJS)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)
	@$(OBJDUMP) -S $@ > $(call asmfile,kernel)
	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $(call symfile,kernel)
$(call create_target,kernel)
```
> 根据利用 “make V=”命令观察到的make执行的具体的命令，要创建kernel，需要tool/kernel.ld文件，该文件已存在，同时需要通过gcc生成如下执行文件：
obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o
```
+ ld bin/kernel
ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o
```
> (3). Makefile文件中创建bootblock的代码如下所示：
``` makefile
# create bootblock
bootfiles = $(call listf_cc,boot)
$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))
bootblock = $(call totarget,bootblock)
$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
	@echo + ld $@
	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ -o $(call toobj,bootblock)
	@$(OBJDUMP) -S $(call objfile,bootblock) > $(call asmfile,bootblock)
	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)
$(call create_target,bootblock)
```
> 根据“make V=” 的信息可知，要创建bootblock，还需要编译生成：
obj/boot/bootasm.o obj/boot/bootmain.o bin/sign
```
+ cc boot/bootasm.S
gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o
+ cc boot/bootmain.c
gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o
+ cc tools/sign.c
gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o
gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign
+ ld bin/bootblock
ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o
'obj/bootblock.out' size: 472 bytes
build 512 bytes boot sector: 'bin/bootblock' success!
```

> (4).最后生成了一个10000块的文件，利用dd命令可以将Bootloader（包括bootblock和kernel）存入创建的虚拟硬盘ucore.img，共复制了5120000个字节
```
dd if=/dev/zero of=bin/ucore.img count=10000
10000+0 records in
10000+0 records out
5120000 bytes (5.1 MB) copied, 0.0822886 s, 62.2 MB/s
dd if=bin/bootblock of=bin/ucore.img conv=notrunc
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.000140268 s, 3.7 MB/s
dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc
138+1 records in
138+1 records out
70775 bytes (71 kB) copied, 0.000466671 s, 152 MB/s
```

#### 2. 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？
> 答：根据tools/sign.c文件可知，一个主引导扇区的大小为512字节，并且它的最后两个字节为0x55和0xAA，代码截图如下所示：
```
buf[510] = 0x55; 
buf[511] = 0xAA;
```

---

## 练习2：使用qemu执行并调试lab1中的软件

#### 1. 从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行
> 为使用gdb+qemu调试ucore，结合实验指导书Lab0的2.4.4节的介绍，在lab1/tools下创建文件lab1init，并输入以下内容：
```
target remote :1234
file bin/kernel
break kern_init
define hook-stop
x/i $pc
end
```
> 根据附录“启动后第一条执行的指令”可知，第一条执行的指令的物理地址为“FFFFFFF0H”，也即“break kern_init”所示，第一条指令处也是函数kern_init函数的入口，调试时在命令行输入以下命令“make lab1-mon”便可以单步追踪BIOS的执行，为使用“lab1-mon”指令，需要在Makefile文件中添加以下代码：
```
# new content: lab1-mon debug-mon
lab1-mon: $(UCOREIMG)
	$(V)$(TERMINAL) -e "$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -monitor stdio -hda $< -serial null"
	$(V)sleep 2
	$(V)$(TERMINAL) -e "gdb -q -x tools/lab1init"
debug-mon: $(UCOREIMG)
#	$(V)$(QEMU) -S -s -monitor stdio -hda $< -serial null &
	$(V)$(TERMINAL) -e "$(QEMU) -S -s -monitor stdio -hda $< -serial null"
	$(V)sleep 2
	$(V)$(TERMINAL) -e "gdb -q -x tools/moninit"
```

#### 2. 在初始化位置0x7c00设置实地址断点,测试断点正常
> 由于要在0x7c00处设置实地址断点，所以需要设定当前使用的架构为8086实模式，而不是i386保护模式，故要使用“(gdb) set arch i8086”，修改lab1init为：
```
target remote :1234
file bin/kernel
set arch i8086
break *0x7c00
continue
x /10i $pc
set arch i386
define hook-stop
x/i $pc
end
```
> 运行make lab1-mon可到到如下结果：
```
0x0000fff0 in ?? ()
warning: A handler for the OS ABI "GNU/Linux" is not built into this configuration
of GDB.  Attempting to continue with the default i8086 settings.

The target architecture is assumed to be i8086
Breakpoint 1 at 0x7c00

Breakpoint 1, 0x00007c00 in ?? ()
=> 0x7c00:	cli    
   0x7c01:	cld    
   0x7c02:	xor    %ax,%ax
   0x7c04:	mov    %ax,%ds
   0x7c06:	mov    %ax,%es
   0x7c08:	mov    %ax,%ss
   0x7c0a:	in     $0x64,%al
   0x7c0c:	test   $0x2,%al
   0x7c0e:	jne    0x7c0a
   0x7c10:	mov    $0xd1,%al
The target architecture is assumed to be i386
(gdb) 
```

#### 3. 从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和bootblock.asm进行比较

> 单步追踪10条指令如下所示，q.log文件中的代码与bootasm.S中相同
```
----------------
IN: 
0x00007c00:  cli    
----------------
IN: 
0x00007c01:  cld    
----------------
IN: 
0x00007c02:  xor    %ax,%ax
----------------
IN: 
0x00007c04:  mov    %ax,%ds
----------------
IN: 
0x00007c06:  mov    %ax,%es
----------------
IN: 
0x00007c08:  mov    %ax,%ss
----------------
IN: 
0x00007c0a:  in     $0x64,%al
----------------
IN: 
0x00007c0c:  test   $0x2,%al
----------------
IN: 
0x00007c0e:  jne    0x7c0a
----------------
IN: 
0x00007c10:  mov    $0xd1,%al
----------------
IN: 
0x00007c12:  out    %al,$0x64
----------------
```

#### 4. 自己找一个bootloader或内核中的代码位置，设置断点并进行测试
> 已在实验中实际进行测试

---

## 练习3：分析bootloader进入保护模式的过程

#### BIOS将通过读取硬盘主引导扇区到内存，并转跳到对应内存中的位置执行bootloader。请分析bootloader是如何完成从实模式进入保护模式的。
提示：需要阅读小节“保护模式和分段机制”和lab1/boot/bootasm.S源码，了解如何从实模式切换到保护模式，需要了解：
为何开启A20，以及如何开启A20
如何初始化GDT表
如何使能和进入保护模式

> 阅读bootasm.S的16-56行与77行左右的GDT表部分，结合bootasm.S的代码来分析bootloader是如何完成从实模式到保护模式的切换。
```
#include <asm.h>

# 开启CPU：切换到32-bit保护模式，跳到C.
# BIOS从硬盘上的第一个扇区加载这段到以0x7c00为起始地址的内存中来，并从%cs=0 %ip=7c00处开始执行实模式

.set PROT_MODE_CSEG,        0x8                     # 内核代码段选择符
.set PROT_MODE_DSEG,        0x10                    # 内核数据段选择符
.set CR0_PE_ON,             0x1                     # 保护模式的使能标识

# 起始地址应该是0x7c00，处于实模式，0x7c00是运行bootloader的起始地址
.globl start
start:
.code16                                             # 16-bit模式的集合
    cli                                             # 屏蔽中断
    cld                                             # 字符操作符增量

    # 初始化重要的数据段寄存器(DS, ES, SS).
    xorw %ax, %ax                                   # 设置为0
    movw %ax, %ds                                   # -> 数据寄存器置0
    movw %ax, %es                                   # -> 外部寄存器置0
    movw %ax, %ss                                   # -> 堆栈寄存器置0

    # 开启A20：
    # 为了向后兼容最早的PC机，物理地址的第20根地址线被置为低电位0，所以当访问超过1M的地址空间时将默认从0开始计算，这段代码是撤销这个设置，即开启A20，方法是：设置键盘控制器的端口值，具体流程如下所示：
    # 禁止中断
    # 等待，直到8042 input buffer为空为止
    # 发送Write 8042 output port命令到8042 input buffer
    # 等待，直到8042 input buffer为空为止
    # 向P2写入数据，将OR2置1
    
seta20.1:
    inb $0x64, %al                                  # 等待不忙(8042 input buffer为空).
    testb $0x2, %al
    jnz seta20.1

    movb $0xd1, %al                                 # 0xd1 -> port 0x64
    outb %al, $0x64                                 # 0xd1代表: 往8042的P2端口写数据

seta20.2:
    inb $0x64, %al                                  #  等待不忙(8042 input buffer为空).
    testb $0x2, %al
    jnz seta20.2

    movb $0xdf, %al                                 # 0xdf -> port 0x60
    outb %al, $0x60                                 # 0xdf = 11011111, 代表设置P2's A20 位为1(the 1 bit)

    # 从实模式切换到保护模式，使用引导区中的GDT表及其描述符，使虚拟地址映射到物理地址，所以有效的内存映射并不会被改变.
    lgdt gdtdesc
    movl %cr0, %eax
    orl $CR0_PE_ON, %eax
    movl %eax, %cr0

    # 跳转到下一个指令，但使用32-bit代码段.
    # 使程序切换到32-bit模式.
    ljmp $PROT_MODE_CSEG, $protcseg

.code32                                             # Assemble for 32-bit mode
protcseg:
    # 建立保护模式下的数据段寄存器
    movw $PROT_MODE_DSEG, %ax                       # 数据段选择符
    movw %ax, %ds                                   # -> DS: 数据寄存器
    movw %ax, %es                                   # -> ES: 外部寄存器
    movw %ax, %fs                                   # -> FS
    movw %ax, %gs                                   # -> GS
    movw %ax, %ss                                   # -> SS: 堆栈寄存器

    # 设置堆栈指针并调用C.其中start(0x7c00)
    movl $0x0, %ebp
    movl $start, %esp
    call bootmain

    # 如何bootmain结束(不应该出现)，循环.
spin:
    jmp spin

# Bootstrap GDT
.p2align 2                                          # force 4 byte alignment
gdt:
    SEG_NULLASM                                     # null seg
    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel
    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel

gdtdesc:
    .word 0x17                                      # sizeof(gdt) - 1
    .long gdt                                       # address gdt
```

---

## 练习4：分析bootloader加载ELF格式的OS的过程

#### 通过阅读bootmain.c，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&OS，

(1). bootloader如何读取硬盘扇区的？
(2). bootloader是如何加载ELF格式的OS？
提示：可阅读“硬盘访问概述”，“ELF执行文件格式概述”这两小节

> (1). 答：bootloader读取硬盘扇区的函数为readsect，它的功能是读取磁盘上的一个扇区，扇区的偏移量是参数secno，如下所示，相关分析见中文注释：
```
/* waitdisk - wait for disk ready */
static void
waitdisk(void) {
    //检查0x1F7的最高两位是否为01，如果是跳出循环，否则循环等待
    while ((inb(0x1F7) & 0xC0) != 0x40) 
        /* do nothing */;
}

/* readsect - read a single sector at @secno into @dst */
static void
readsect(void *dst, uint32_t secno) {
    // 等待磁盘准备就绪
    waitdisk();

    outb(0x1F2, 1);                             // count = 1
    outb(0x1F3, secno & 0xFF);                  
    outb(0x1F4, (secno >> 8) & 0xFF);           
    outb(0x1F5, (secno >> 16) & 0xFF);          
    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);  
    outb(0x1F7, 0x20);                          // cmd 0x20 - read sectors

    // 等待磁盘准备就绪
    waitdisk();

    // 读取扇区
    insl(0x1F0, dst, SECTSIZE / 4);
}
```
> 附录：对硬盘进行操作的常用端口是1F0H~1F7H号端口，readsec中端口含义如下： 
端口号 读还是写 具体含义 
1F2H 读/写 用来放入要读写的扇区数量 
1F3H 读/写 用来放入要读写的扇区号码 
1F4H 读/写 用来存放读写柱面的低8位字节 
1F5H 读/写 用来存放读写柱面的高2位字节(其高6位恒为0) 
1F6H 读/写 用来存放要读/写的磁盘号及磁头号 
1F7H 读&#160;&#160; &#160; &#160;用来存放读操作后的状态 

(2). 答：readseg函数为读取ELF文件中的一个段，其中三个参数的含义为：
&#160; &#160; &#160; &#160; va : 表示连接地址，转换后为加载地址
&#160; &#160; &#160; &#160; count : 表示段的字节数
&#160; &#160; &#160; &#160; offset：该段相对于文件头的偏移
bootmain函数为bootloader的主体，它描述了bootloader加载ELF格式文件的步骤，具体分析见如下代码中的中文注释：
```
void
bootmain(void) {
    // 读取磁盘的第一页
    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);

    // 判断是否是一个有效的ELF格式文件?
    if (ELFHDR->e_magic != ELF_MAGIC) {
        goto bad;
    }

    struct proghdr *ph, *eph;

    // load each program segment (ignores ph flags)
    // ph为ELF段表首地址；eph为ELF段表末地址
    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
    eph = ph + ELFHDR->e_phnum;
    // 循环读入每个段
    for (; ph < eph; ph ++) {
        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
    }

    // call the entry point from the ELF header
    // note: does not return
    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
    
//出现问题时的处理方式：
bad:
    outw(0x8A00, 0x8A00);
    outw(0x8A00, 0x8E00);

    /* do nothing */
    while (1);
}
```
---

## 练习5：实现函数调用堆栈跟踪函数

#### 要求完成函数kern/debug/kdebug.c::print_stackframe的实现，提交改进后源代码包（可以编译执行），并在实验报告中简要说明实现过程，看看输出是否与上述显示大致一致，并解释最后一行各个数值的含义。
> 根据注释的提示完成代码如下所示： 
```
uint32_t ebp = read_ebp();
uint32_t eip = read_eip();
int i = 0;
for (i=0; ebp!=0 && i<STACKFRAME_DEPTH; i++) {
	cprintf("%s:0x%08x %s:0x%08x ", "ebp", ebp, "eip", eip);
	// 读取4个参数值
	uint32_t args1 = ((uint32_t*)ebp)[2];
	uint32_t args2 = ((uint32_t*)ebp)[3];
	uint32_t args3 = ((uint32_t*)ebp)[4];
	uint32_t args4 = ((uint32_t*)ebp)[5];
	cprintf("%s:0x%08x 0x%08x 0x%08x 0x%08x\n", "args", args1, args2, args3, args4);
	print_debuginfo(eip-1);
	ebp = ((uint32_t*)ebp)[0];
	eip = ((uint32_t*)ebp)[1];
}
```
> 出现的问题：
1. ‘for’ loop initial declarations are only allowed in C99 mode
这是因为在gcc中直接在for循环中初始化了增量，将变量i定义在for循环外面就可以了
2. 对指针与引用的理解混乱，所以一开始编译一直有问题

>最后打印出的结果如下所示：
```
Special kernel symbols:
  entry  0x00100000 (phys)
  etext  0x001032ed (phys)
  edata  0x0010ea16 (phys)
  end    0x0010fd20 (phys)
Kernel executable memory footprint: 64KB
ebp:0x00007b08 eip:0x001009a6 args:0x00010094 0x00000000 0x00007b38 0x00100092
    kern/debug/kdebug.c:306: print_stackframe+21
ebp:0x00007b18 eip:0x00100cbf args:0x00000000 0x00000000 0x00000000 0x00007b88
    kern/debug/kmonitor.c:125: mon_backtrace+10
ebp:0x00007b38 eip:0x00100092 args:0x00000000 0x00007b60 0xffff0000 0x00007b64
    kern/init/init.c:48: grade_backtrace2+33
ebp:0x00007b58 eip:0x001000bb args:0x00000000 0xffff0000 0x00007b84 0x00000029
    kern/init/init.c:53: grade_backtrace1+38
ebp:0x00007b78 eip:0x001000d9 args:0x00000000 0x00100000 0xffff0000 0x0000001d
    kern/init/init.c:58: grade_backtrace0+23
ebp:0x00007b98 eip:0x001000fe args:0x0010331c 0x00103300 0x0000130a 0x00000000
    kern/init/init.c:63: grade_backtrace+34
ebp:0x00007bc8 eip:0x00100055 args:0x00000000 0x00000000 0x00000000 0x00010094
    kern/init/init.c:28: kern_init+84
ebp:0x00007bf8 eip:0x00007d68 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8
    <unknow>: -- 0x00007d67 --
++ setup timer interrupts
(THU.CST) os is loading ...
```
> 最后一行是：
ebp:0x00007bf8 eip:0x00007d68 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8
    <unknow>: -- 0x00007d67 --”
对应第一个使用堆栈的函数bootmain，即bootmain函数的ebp为0x00007bf8，返回地址为0x00007d68，四个参数依次为0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8

---

## 练习6：完善中断初始化和处理
####请完成编码工作和回答如下问题：
(1). 中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？

> 答： 中断初始化和处理的过程如下：
  pic_init()：完成中断控制器（8259中断控制器）的初始化
  idt_init()：中断描述符表的初始化
  clock_init()：时钟初始化
  intr_enable()：使能中断
中断描述符表中的一个表项占8个字节，0-1字节与6-7字节构成位移，2-3字节为段选择子，两者结合起来为中断处理程序的入口程序

(2). 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。
> 答：补充代码如下所示：
```
void idt_init(void) {
	extern uintptr_t __vectors[];
	int i = 0;
	// 其中DPL_USER特权级为3, DPL_KERNEL特权级为0
	for (i=0; i<256; i++)
		SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
	SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
	lidt(&idt_pd);
}
```
在保护模式下，最多会产生最多256个Interrupt/Exception Vectors，但是参考答案后感觉在for循环中直接写256不太合适，虽然结果也是对的，不过使用“sizeof(idt) / sizeof(struct gatedesc)”会更科学

(3). 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕上打印一行文字”100 ticks”。
> 答： 实现代码如下所示：
```
case IRQ_OFFSET + IRQ_TIMER:
    ticks++;
    if (ticks % TICK_NUM == 0) // 其中TICK_NUM = 100
    	print_ticks();
    break;
```
