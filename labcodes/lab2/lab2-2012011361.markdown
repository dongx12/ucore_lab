# Lab2实验报告
本次实验包含三个部分：
1. 首先了解如何发现系统中的物理内存；
2. 然后了解如何建立对物理内存的初步管理，即了解连续物理内存管理；
3. 最后了解页表相关的操作，即如何建立页表来实现虚拟内存到物理内存之间的映射，对段页式内存管理机制有一个比较全面的了解。
&#160; &#160; &#160; &#160;本实验里面实现的内存管理还是非常基本的，并没有涉及到对实际机器的优化，比如针对 cache 的优化等。如果大家有余力，尝试完成扩展练习。
标签（空格分隔）： ucore-lab2

---

## 练习0：填写已有实验

本实验依赖实验1，请把你做的实验1的代码填入本实验中代码中有“LAB1”的注释相应部分。提示：可采用diff和patch工具进行半自动的合并（merge），也可用一些图形化的比较/merge工具来手动合并，比如meld，eclipse中的diff/merge工具，understand中的diff/merge工具等。

---

## 练习1：实现 first-fit 连续物理内存分配算法（需要编程）

在实现first fit 内存分配算法的回收函数时，要考虑地址连续的空闲块之间的合并操作。提示:在建立空闲页块链表时，需要按照空闲页块起始地址来排序，形成一个有序的链表。可能会修改default_pmm.c中的default_init，default_init_memmap，default_alloc_pages， default_free_pages等相关函数。请仔细查看和理解default_pmm.c中的注释。

1. 请在实验报告中简要说明你的设计实现过程：
> 答：程序中按地址从小到大维护有一个空闲块的链表free_list,对于每个空闲块是按照该空闲块包含的空闲页来维护的，即：free_list中存储的并不是一个一个的block，而是一个一个的page，由一定数目的page来组成一个空闲块；同时对空闲块的第一个page设置page->property来保存该空闲块包含的page的数目，其后的(n-1)个page的page->property为0，这样就将free_list切分成了不同大小的空闲块，然后根据default_pmm.c中注释的提示步骤，依次实现：
①default_init：这个函数没有修改，主要用来初始化free_list和nr_free
②default_init_memmap：该函数用来初始化一个空闲块
③default_alloc_pages：在空闲块列表中寻找第一个大小合适的空闲块分配，并返回分配的地址
④default_free_pages：将新释放的空闲块插入到空闲块列表的合适位置，并查看是否可与前后空闲块合并

2. 请回答如下问题：你的first fit算法是否有进一步的改进空间
> 答：有改进空间，由于free_list是按照空闲块的页来管理的，而在需要进行内存分配的时候从free_list的开头遍历free_list会浪费很多时间，即使发现某一空闲块只有m，不够分配，仍不得不遍历接下来的(m-1)块page，这个地方会占用比较多的时间，如果可以仅访问page->porperty大于0的节点，当发现该空闲块内存不够，则直接跳过(m-1)块直接访问下一个空闲内存块将会节省很多时间，但是由于free_list是双向链表结果，所以没有办法直接跳过中间的一些节点，如果想要加快速度，可能需要再多加一个数组来block的位置。

---

## 练习2：实现寻找虚拟地址对应的页表项（需要编程）

通过设置页表和对应的页表项，可建立虚拟内存地址和物理内存地址的对应关系。其中的get_pte函数是设置页表项环节中的一个重要步骤。此函数找到一个虚地址对应的二级页表项的内核虚地址，如果此二级页表项不存在，则分配一个包含此项的二级页表。本练习需要补全get_pte函数 in kern/mm/pmm.c，实现其功能，请仔细查看和理解get_pte函数中的注释。

1. 请在实验报告中简要说明你的设计实现过程：
> 答：get_pte函数完成的功能是：给定一个虚拟地址，找出该虚拟地址在二级页表中对应的项，根据注释的提示：pgdir给出页表的起始地址，通过查找这个页表，我们需要给出二级也表中对应的地址，在查找二级页表时，如果发现二级页表不存在，则需要根据create参数的来选择是否穿件新的二级页表，如果create的值为0，则get_pte返回NULL，若create参数不为0，则需要通过alloc_page申请一个新的物理页，再在以及页表中添加页目录表项指向表示二级页表的新物理页，同时新申请的页必须全部设定为0，因为这个页所代表的虚拟地址都没有被映射。当建立一级页表到二级页表时，应该同时设置上PTE_U、PTE_W、PTE_P；如果原来就有二级页表，或者新建立了页表，则只需返回对应项的地址即可。

2. 请描述页目录项（Pag Director Entry）和页表（Page Table Entry）中每个组成部分的含义和以及对ucore而言的潜在用处？
> 答：页目录表项内容 = 页表起始物理地址 | PTE_U | PTE_W | PTE_P
&#160; &#160; &#160; &#160;页表项内容 = pa | PTE_P | PTE_W 
其中：pa为逻辑地址la对应的物理地址
PTE_U：位3，表示用户态的软件可以读取对应地址的物理内存页内容
PTE_W：位2，表示物理内存页内容可写
PTE_P: 位1，表示物理内存页存在

3. 如果ucore执行过程中访问内存，出现了页访问异常，请问硬件要做哪些事情？
> 答：当发生页访问异常时，ucore会保存现场，并执行中断服务例程；硬件会向硬盘传递消息，并在内存和硬件间进行数据交换，当处理完异常后，会利用iret指令跳转到被打断的程序，恢复保存的现场并继续执行。

---

## 练习3：释放某虚地址所在的页并取消对应二级页表项的映射（需要编程）

当释放一个包含某虚地址的物理内存页时，需要让对应此物理内存页的管理数据结构Page做相关的清除处理，使得此物理内存页成为空闲；另外还需把表示虚地址与物理地址对应关系的二级页表项清除。请仔细查看和理解page_remove_pte函数中的注释。为此，需要补全在 kern/mm/pmm.c中的page_remove_pte函数。

1. 请在实验报告中简要说明你的设计实现过程。
> 答：根据注释的提示：首先判断根据PTE_P标志位判断该页目录是否存在，如果存在，则需要做相关的处理，同时如果page->ref为0，则需要释放page，然后再释放二级页表项，最后再刷新TLB。

2. 数据结构Page的全局变量（其实是一个数组）的每一项与页表中的页目录项和页表项有无对应关系？如果有，其对应关系是啥？
> 答：有对应关系，如PTE中的PTE_ADDR，右移12位后即为该页表项对应的页在Page全局数组中的位置

3. 如果希望虚拟地址与物理地址相等，则需要如何修改lab2，完成此事？ 鼓励通过编程来具体完成这个问题
> 答：lab2中ucore的起始虚拟地址从0xC0100000开始，如果希望虚拟地址与物理地址相等，可修改起始地址，让gcc编译出的虚拟起始地址从0x100000开始即可

