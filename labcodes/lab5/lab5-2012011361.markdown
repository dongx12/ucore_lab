# Lab5实验报告
实验4完成了内核线程，但到目前为止，所有的运行都在内核态执行。实验5将创建用户进程，让用户进程在用户态执行，且在需要ucore支持时，可通过系统调用来让ucore提供服务。为此需要构造出第一个用户进程，并通过系统调用sys_fork/sys_exec/sys_exit/sys_wait来支持运行不同的应用程序，完成对用户进程的执行过程的基本管理。
>* 了解第一个用户进程创建过程
>* 了解系统调用框架的实现机制
>* 了解ucore如何实现系统调用sys_fork/sys_exec/sys_exit/sys_wait来进行进程管理

标签（空格分隔）： ucore-lab

---

## 练习0：填写已有实验

本实验依赖实验1/2/3/4。请把你做的实验1/2/3/4的代码填入本实验中代码中有“LAB1”/“LAB2”/“LAB3”/“LAB4”的注释相应部分。注意：为了能够正确执行lab5的测试应用程序，可能需对已完成的实验1/2/3/4的代码进行进一步改进。
> 答：已经完成了前面实验的代码移植
在完成前四部分的代码移植时，要根据LAB5注释的提示对LAB1-LAB4的内容进行一定的更新，其中遇到的一个问题时LAB2代码中一个变量的名字的问题，我之前将双向链表的名字设置为site，但是make grade时最后forktree的时候总是不对，其他都是可以的，最近将名字改成le后发现就都正确了，我猜测可能是与代码的某变量名字重复导致出错。

---

## 练习1: 加载应用程序并执行（需要编码）

do_execv函数调用load_icode（位于kern/process/proc.c中）来加载并解析一个处于内存中的ELF执行文件格式的应用程序，建立相应的用户内存空间来放置应用程序的代码段、数据段等，且要设置好proc_struct结构中的成员变量trapframe中的内容，确保在执行此进程后，能够从应用程序设定的起始执行地址开始执行，需设置正确的trapframe内容，请在实验报告中简要说明你的设计实现过程。
> 答：这部分主要是设置trapframe的内容，根据注释的提示：
将tf_cs设置为USER_CS，即用户代码段；
将tf_ds=tf_es=tf_ss设置为USER_DS，即用户数据段；
将tf_esp设置为用户栈的栈顶USTACKTOP
将tf_eip设置为用户程序的入口即elf->e_entry
将tf_eflags设置为允许中断，即FL_IF
实现代码如下所示：
```
//(6) setup trapframe for user environment
struct trapframe *tf = current->tf;
memset(tf, 0, sizeof(struct trapframe));
/* LAB5:EXERCISE1 YOUR CODE
 * should set tf_cs,tf_ds,tf_es,tf_ss,tf_esp,tf_eip,tf_eflags
 * NOTICE: If we set trapframe correctly, then the user level process can return to USER MODE from kernel. So
 *          tf_cs should be USER_CS segment (see memlayout.h)
 *          tf_ds=tf_es=tf_ss should be USER_DS segment
 *          tf_esp should be the top addr of user stack (USTACKTOP)
 *          tf_eip should be the entry point of this binary program (elf->e_entry)
 *          tf_eflags should be set to enable computer to produce Interrupt
 */
tf->tf_cs = USER_CS;
tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
tf->tf_esp = USTACKTOP;
tf->tf_eip = elf->e_entry;
tf->tf_eflags |= FL_IF; //#define FL_IF  0x00000200  //Interrupt Flag
```

请在实验报告中描述当创建一个用户态进程并加载了应用程序后，CPU是如何让这个应用程序最终在用户态执行起来的。即这个用户态进程被ucore选择占用CPU执行（RUNNING态）到具体执行应用程序第一条指令的整个经过。
> 答：第一个用户进程是由第二个内核线程initproc通过把hello应用程序执行码覆盖到initproc的用户虚拟内存空间来创建的，当户进程的用户环境已经搭建完毕后，initproc将按产生系统调用的函数调用路径原路返回，执行中断返回指令“iret”，将切换到用户进程hello的第一条语句位置_start处开始执行。

---

## 练习2: 父进程复制自己的内存空间给子进程（需要编码）

创建子进程的函数do_fork在执行中将拷贝当前进程（即父进程）的用户内存地址空间中的合法内容到新进程中（子进程），完成内存资源的复制。具体是通过copy_range函数（位于kern/mm/pmm.c中）实现的，请补充copy_range的实现，确保能够正确执行。
> 答：根据注释可知，首先得到page和npage的内核虚拟地址src_kvaddr和dst_kvaddr，然后在利用memcpy将src_kvaddr赋值到dst_kvaddr，大小为PGSIZE，最后建立物理地址与线性地址的映射，实现代码如下所示：
```
/* LAB5:EXERCISE2 2012011361
 * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
 *
 * Some Useful MACROs and DEFINEs, you can use them in below implementation.
 * MACROs or Functions:
 *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
 *    page_insert: build the map of phy addr of an Page with the linear addr la
 *    memcpy: typical memory copy function
 *
 * (1) find src_kvaddr: the kernel virtual address of page
 * (2) find dst_kvaddr: the kernel virtual address of npage
 * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
 * (4) build the map of phy addr of  nage with the linear addr start
 */
void * src_kvaddr = page2kva(page);
void * dst_kvaddr = page2kva(npage);
memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
ret = page_insert(to, npage, start, perm);
```

请在实验报告中简要说明如何设计实现“Copy on Write” 机制，给出概要设计，鼓励给出详细设计。
Copy-on-write（简称COW）的基本概念是指如果有多个使用者对一个资源A（比如内存块）进行读操作，则每个使用者只需获得一个指向同一个资源A的指针，就可以该资源了。若某使用者需要对这个资源A进行写操作，系统会对该资源进行拷贝操作，从而使得该“写操作”使用者获得一个该资源A的“私有”拷贝—资源B，可对资源B进行写操作。该“写操作”使用者对资源B的改变对于其他的使用者而言是不可见的，因为其他使用者看到的还是资源A。
> 答：可以在dup_mmap中不直接复制vma到nvma，而使用vma的指针，这样的话就可以先共用同一块资源，当某使用者需要对该资源进行写操作时，就新建一个vma，并调用copy_range复制数据，并继续进行写操作对内存进行修改。
以下代码为ucore中现在的实现：
```
int dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
        if (nvma == NULL) 
            return -E_NO_MEM;
        insert_vma_struct(to, nvma);
        bool share = 0;
        if(copy_range(to->pgdir,from->pgdir,vma->vm_start,vma->vm_end,share)!= 0)
            return -E_NO_MEM;
    }
    return 0;
}
```

---

## 练习3: 阅读分析源代码，理解进程执行 fork/exec/wait/exit 的实现，以及系统调用的实现（不需要编码）

请在实验报告中简要说明你对 fork/exec/wait/exit函数的分析。并回答如下问题：
请分析fork/exec/wait/exit在实现中是如何影响进程的执行状态的？
> 答：分析如下所示：
fork:创建子线程，并复制mm等数据，并唤醒新线程 “-->do_fork-->wakeup_proc”
exec:在fork之后，进程执行某一程序，通过load_icode加载一个程序并刷新mm
wait:等待一个或多个处于僵尸状态的子进程并释放资源，如果子进程还在运行，则设置自己的状态为睡眠，等待被下次唤醒继续执行
exit:通过调用exit_mmap和put_pgdir和mm_destroy来释放进程的大部分资源，并将自己的状态设置为僵尸进程，然后唤醒父进程做最后的资源回收；如果当前进程还有子进程，则需要把这些子进程的父进程指针设置为内核线程initproc，且各个子进程指针需要插入到initproc的子进程链表中，如果某个子进程的执行状态是PROC_ZOMBIE，则需要唤醒initproc来完成对此子进程的最后回收工作。
