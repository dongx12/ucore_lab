# Lab8实验报告

>* 了解基本的文件系统系统调用的实现方法
>* 了解一个基于索引节点组织方式的Simple FS文件系统的设计与实现
>* 了解文件系统抽象层-VFS的设计与实现

标签（空格分隔）： ucore-lab

---

## 练习0：填写已有实验

本实验依赖实验1/2/3/4/5/6/7。请把你做的实验1/2/3/4/5/6/7的代码填入本实验中代码中有“LAB1”/“LAB2”/“LAB3”/“LAB4”/“LAB5”/“LAB6” /“LAB7”的注释相应部分。并确保编译通过。注意：为了能够正确执行lab8的测试应用程序，可能需对已完成的实验1/2/3/4/5/6/7的代码进行进一步改进。
> 答：已完成了前面代码的移植，其中一些代码需要新增：
在kern/process/proc.c中的alloc_proc函数中需要增加：proc->filesp = NULL;
在kern/process/proc.c中的do_fork函数中copy_mm之前需要增加copy_files

---

## 练习1: 完成读文件操作的实现（需要编码）

首先了解打开文件的处理流程，然后参考本实验后续的文件读写操作的过程分析，编写在sfs_inode.c中sfs_io_nolock读文件中数据的实现代码。
请在实验报告中给出设计实现“UNIX的PIPE机制”的概要设计方案，鼓励给出详细设计方案
> 答：这一部分主要涉及到三个函数sfs_bmap_load_nolock和sfs_block_op和sfs_buf_op
sfs_bmap_load_nolock：将对应sfs_inode的第index个索引指向的block的索引值取出存到相应的指针指向的单元(ino_store)
而从sfs_inode.c文件的定义可知，sfs_block_op和sfs_buf_op在读和写的时候分别调用sfs_wblock和sfs_rblock、sfs_wbuf与sfs_rbuf
在进行处理的时候要判断起始offset与终点endpos的位置是否在一个block的中间，如果是的话要用buf进行读取不满足一个block的内容，中间的整个block用block进行读取，同时要注意sfs_buf_op与sfs_buf_op最后一个参数的不同含义。
实现代码如下：
```
//判断offset是否为一个block的开头
blkoff = offset % SFS_BLKSIZE;
if (blkoff != 0) {
    size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
    //sfs_bmap_load_nolock : according to the DIR's inode and the logical index of block in inode, find the NO. of disk block.
    if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0)
    	goto out;
    //offset表示偏移量
    if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0)
    	goto out;
    alen += size;
    if (nblks == 0)
    	goto out;
    buf += size;
    blkno++; //读写操作的开始block编号
    nblks--; //未读的block数目
}
//读取中间整块的blcok
size = SFS_BLKSIZE;
while (nblks != 0) {
	if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0)
		goto out;
	//1表示读1个block
	if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0)
		goto out;
	alen += size;
	buf += size;
	blkno++; //读写操作的开始block编号
	nblks--; //未读的block数目
}
//判断endpos是否为一个block的开头
if ((size = endpos % SFS_BLKSIZE) != 0) {
	if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0)
		goto out;
	//0表示偏移量，即从该block头开始
	if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0)
		goto out;
	alen += size;
}
```
> 为实现“UNIX的PIPE机制”可以新增函数pipe_create用来创建管道，函数pipe_read和pipe_write来负责管道的读和写，同时可用环形链表作为数据区，用信号量来控制读写的互斥，如果缓冲区满或不能进行读写时睡眠，可以继续操作时被唤醒。

---

## 练习2: 完成基于文件系统的执行程序机制的实现（需要编码）

改写proc.c中的load_icode函数和其他相关函数，实现基于文件系统的执行程序机制。执行：make qemu。如果能看看到sh用户程序的执行界面，则基本成功了。如果在sh用户界面上可以执行"ls","hello"等其他放置在sfs文件系统中的其他执行程序，则可以认为本实验基本成功。
请在实验报告中给出设计实现基于“UNIX的硬链接和软链接机制”的概要设方案，鼓励给出详细设计方案
> 答：本次要重写proc.c中的load_icode函数，首先要调用mm_create()函数和setup_pgdir()来创建mm和页表项，之后利用load_icode_read来加载ELF文件，调用mm_map来创建一个新的vma，利用pgdir_alloc_page为TEXT/DATA/BSS分配内存，然后调用mm_map建立用户栈，同时将参数压入栈，最后设置mm和cr3及用户空间的trapframe。

> 目录是一种由系统管理的特殊文件，它基本上是一份列表,每份文件都会存储在一个编好号的inode里，链接分硬链接和软链接（又叫符号链接）：
硬链接的本质是：不同的文件名指向同样的inode，文件事实上只有一份
软链接又叫符号链接：它是目录里的一种特殊项目，用来告诉系统到别的方向找找看
综上：目录不能建立硬链接，但是可以建立软连接
如果要实现硬链接的话，可以在新建inode时候使disk_inode等于目标的disk_inode，即指向同一个inode，当删除一个文件时，inode的链接数减一即可，当减到0时文件丢失；
如果要实现软连接的话如建立fileB到fileA的软连接，可以在inode中的in_type中新增一个表示软连接地址的变量，如inode_type_soft_link，同时建立软链接之后inode的链接数不变，删除fileA时inode的链接数减一，减到0时文件丢失。
